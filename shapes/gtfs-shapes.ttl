@prefix dct: <http://purl.org/dc/terms/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix gtfs: <http://vocab.gtfs.org/terms#> .
@prefix schema: <http://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix gtfs_shape: <http://vocab.gtfs.org/shapes#> .

gtfs_shape:Feed a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/feed/.*" ;
    sh:property [ 
        sh:datatype xsd:date ;
        sh:nodeKind sh:Literal ;
        sh:lessThan schema:endDate ; 
        sh:path schema:startDate 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path schema:version 
    ],
    [   sh:datatype xsd:date ;
        sh:nodeKind sh:Literal ;
        sh:path schema:endDate 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path dct:language
        #sh:pattern "^[a-z]{2}(-[A-Z]{2})?$" # conformant with ISO 639-2?  Not sure, it should be IETF BCP 47
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path dct:publisher 
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path foaf:page 
    ] ;
    sh:targetClass gtfs:Feed .

gtfs_shape:Frequency a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/frequency/.*-.*" ;
    sh:property [ 
        sh:nodeKind sh:Literal ; 
        sh:path gtfs:startTime;
        sh:lessThan gtfs:endTime ; 
        #sh:datatype xsd:time ; #should be time in terms of hh:mm:ss
    ],
    [   sh:datatype xsd:nonNegativeInteger ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:headwaySeconds 
    ],
    [   sh:node gtfs_shape:Trip ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:trip 
    ],
    [   sh:datatype xsd:boolean ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:exactTimes 
    ],
    [ 
        sh:nodeKind sh:Literal ;
        sh:path gtfs:endTime;
        #sh:datatype xsd:time ; #should be time in terms of hh:mm:ss 
    ] ;
    sh:targetClass gtfs:Frequency .

gtfs_shape:Service a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/services/.*" ;
    sh:property [ 
        sh:node gtfs_shape:CalendarDateRule ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:serviceRule 
    ] ;
    sh:targetClass gtfs:Service .

gtfs_shape:StopTime a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/stoptimes/.*-.*-.*" ;
    sh:property [ 
        sh:datatype xsd:time ; #this needs to change in the mapping as well, it's time
        sh:nodeKind sh:Literal ;
        sh:lessThan gtfs:arrivalTime;
        sh:path gtfs:departureTime 
    ],
    [   sh:node gtfs_shape:Trip ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:trip 
    ],
    [   sh:datatype xsd:duration ; #this needs to change in the mapping as well, it's time
        sh:nodeKind sh:Literal ;
        sh:path gtfs:arrivalTime 
    ],
    [
        sh:nodeKind sh:IRI ;
        sh:path gtfs:pickupType;
        sh:or (            
            gtfs_shape:NotAvailable
            gtfs_shape:MustPhone
            gtfs_shape:Regular
            gtfs_shape:MustCoordinateWithDriver
        )
    ],
    [   
        sh:nodeKind sh:IRI ;
        sh:path gtfs:dropOffType;
        sh:or (            
            gtfs_shape:NotAvailable
            gtfs_shape:MustPhone
            gtfs_shape:Regular
            gtfs_shape:MustCoordinateWithDriver
        )
    ],
    [   sh:node gtfs_shape:Stop ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:stop 
    ],
    [   
        sh:nodeKind sh:Literal ;
        sh:datatype xsd:float;
        sh:minInclusive 0;
        sh:path gtfs:distanceTraveled 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:headsign 
    ],
    [   sh:datatype xsd:integer ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:stopSequence 
    ] ;
    sh:targetClass gtfs:StopTime .

gtfs_shape:Agency a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/agency/.*" ;
    sh:property [ 
        sh:nodeKind sh:Literal ; # here we could add a parttern I think
        sh:path gtfs:timeZone 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path foaf:name 
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path foaf:page 
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path gtfs:fareUrl 
    ],
    [   sh:nodeKind sh:Literal ; # here we could add pattern
        sh:path foaf:phone 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path dct:language 
    ] ;
    sh:targetClass gtfs:Agency .

gtfs_shape:CalendarDateRule a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/calendar_date_rule/.*-.*" ;
    sh:property [ 
        sh:datatype xsd:boolean ; # The semantics is not a boolean, we can leave it for now as it's but will need to change to an Enum
        sh:nodeKind sh:Literal ;
        sh:path gtfs:dateAddition 
    ],
    [   sh:datatype xsd:date ;
        sh:nodeKind sh:Literal ;
        sh:path dct:date 
    ] ;
    sh:targetClass gtfs:CalendarDateRule .

gtfs_shape:CalendarRule a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/calendar_rules/.*" ;
    sh:property [ 
        sh:datatype xsd:boolean ; # The semantics is not a boolean, we can leave it for now as it's but will need to change to an Enum
        sh:nodeKind sh:Literal ;
        sh:path gtfs:sunday 
    ],
    [   sh:datatype xsd:boolean ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:saturday 
    ],
    [   sh:datatype xsd:date ;
        sh:nodeKind sh:Literal ;
        sh:lessThan schema:endDate;
        sh:path schema:startDate 
    ],
    [   sh:datatype xsd:boolean ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:tuesday 
    ],
    [   sh:datatype xsd:boolean ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:wednesday 
    ],
    [   sh:datatype xsd:boolean ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:friday 
    ],
    [   sh:datatype xsd:date ;
        sh:nodeKind sh:Literal ;
        sh:path schema:endDate 
    ],
    [   sh:datatype xsd:boolean ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:thursday 
    ],
    [   sh:datatype xsd:boolean ;
        sh:nodeKind sh:Literal ;
        sh:path gtfs:monday 
    ] ;
    sh:targetClass gtfs:CalendarRule .

gtfs_shape:Route a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/routes/.*" ;
    sh:property [ 
        sh:nodeKind sh:Literal ;
        sh:path gtfs:longName 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:shortName 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:textColor 
    ],
    [   sh:node gtfs_shape:Agency ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:agency 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:color;
        sh:pattern "^[0-9A-Fa-f]{6}$"
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path gtfs:routeUrl 
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path gtfs:routeType;
        sh:or (
            gtfs_shape:LightRail
            gtfs_shape:Subway
            gtfs_shape:Rail
            gtfs_shape:Bus
            gtfs_shape:Ferry
            gtfs_shape:CableCar
            gtfs_shape:Gondola
            gtfs_shape:Funicular
        )
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path dct:description 
    ] ;
    sh:targetClass gtfs:Route .


gtfs_shape:ShapePoint a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/shape_point/.*-.*" ;
    sh:property [ 
        sh:datatype xsd:double ;
        sh:nodeKind sh:Literal ;
        sh:minInclusive -90 ;
        sh:maxInclusive 90 ;
        sh:path geo:lat 
    ],
    [   sh:nodeKind sh:Literal ;  
        sh:path gtfs:pointSequence;
        sh:datatype xsd:nonNegativeInteger
    ],
    [   sh:datatype xsd:double ;
        sh:nodeKind sh:Literal ;
        sh:minInclusive -180 ;
        sh:maxInclusive 180 ;
        sh:path geo:long 
    ],
    [   sh:nodeKind sh:Literal ; # I think this could be float
        sh:path gtfs:distanceTraveled 
    ] ;
    sh:targetClass gtfs:ShapePoint .

gtfs_shape:Shape a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/shape/.*" ;
    sh:property [ 
        sh:node gtfs_shape:ShapePoint ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:shapePoint 
    ] ;
    sh:targetClass gtfs:Shape .

gtfs_shape:Stop a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/stops/.*" ;
    sh:property [ 
        sh:nodeKind sh:IRI ;
        sh:path foaf:page 
    ],
    [   sh:datatype xsd:double ;
        sh:nodeKind sh:Literal ;
        sh:minInclusive -180 ;
        sh:maxInclusive 180 ;
        sh:path geo:long 
    ],
    [   sh:datatype xsd:double ;
        sh:nodeKind sh:Literal ;
        sh:minInclusive -90 ;
        sh:maxInclusive 90 ;
        sh:path geo:lat 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:timeZone 
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path gtfs:locationType;
        sh:or (
            gtfs_shape:StopOrPlatform
            gtfs_shape:Station
            gtfs_shape:EntranceOrExit
            gtfs_shape:GenericNode
            gtfs_shape:BoardingArea
        )
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path dct:description 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:zone 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path dct:identifier 
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path gtfs:wheelchairAccessible;
        sh:or (
            gtfs_shape:NotWheelchairAccessible
            gtfs_shape:WheelchairAccessible
        )
    ],
    [   sh:node gtfs_shape:Stop ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:parentStation 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path foaf:name 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:code 
    ] ;
    sh:targetClass gtfs:Stop .

gtfs_shape:Trip a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:pattern "http://transport.linkeddata.es/madrid/metro/trips/.*" ;
    sh:property [ 
        sh:nodeKind sh:Literal ;
        sh:path gtfs:headsign 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:block 
    ],
    [   sh:node gtfs_shape:Route ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:route 
    ],
    [   sh:nodeKind sh:Literal ;
        sh:path gtfs:shortName 
    ],
    [   sh:nodeKind sh:IRI ;
        sh:path gtfs:wheelchairAccessible;
        sh:or (
            gtfs_shape:NotWheelchairAccessible
            gtfs_shape:WheelchairAccessible
        )
    ],
    [   sh:nodeKind sh:Literal ; # this should be moved to Enum
        sh:datetype xsd:nonNegativeInteger;
        sh:path gtfs:direction 
    ],
    [   sh:node gtfs_shape:Shape ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:shape 
    ],
    [   sh:node gtfs_shape:Service ;
        sh:nodeKind sh:IRI ;
        sh:path gtfs:service 
    ] ;
    sh:targetClass gtfs:Trip .


#SKOS


# DropOffType and PickupType for StopTimes

gtfs_shape:Regular a sh:NodeShape;
    sh:targetNode gtfs:Regular;
    sh:class skos:Concept; 
    sh:property gtfs_shape:StopTimeScheme .

gtfs_shape:MustCoordinateWithDriver a sh:NodeShape;
    sh:targetNode gtfs:MustCoordinateWithDriver;
    sh:class skos:Concept; 
    sh:property gtfs_shape:StopTimeScheme .

gtfs_shape:NotAvailable a sh:NodeShape;
    sh:targetNode gtfs:NotAvailable;
    sh:class skos:Concept; 
    sh:property gtfs_shape:StopTimeScheme .

gtfs_shape:MustPhone a sh:NodeShape;
    sh:targetNode gtfs:MustPhone;
    sh:class skos:Concept; 
    sh:property gtfs_shape:StopTimeScheme .

gtfs_shape:StopTimeScheme a sh:PropertyShape;
    sh:path skos:inScheme; 
    sh:or ( [sh:hasValue gtfs:PickupType] [sh:hasValue gtfs:DropOffType] ).


# WheelchairBoardingStatus for Stops and Trips

gtfs_shape:WheelchairAccessible a sh:NodeShape;
    sh:targetNode gtfs:WheelchairAccessible;
    sh:class skos:Concept; 
    sh:property gtfs_shape:WheelchairBoardingStatusScheme .

gtfs_shape:NotWheelchairAccessible a sh:NodeShape;
    sh:targetNode gtfs:NotWheelchairAccessible;
    sh:class skos:Concept; 
    sh:property gtfs_shape:WheelchairBoardingStatusScheme .

gtfs_shape:WheelchairBoardingStatusScheme a sh:PropertyShape;
    sh:path skos:inScheme; 
    sh:hasValue gtfs:WheelchairBoardingStatus .


# LocationType for Stops

gtfs_shape:StopOrPlatform a sh:NodeShape;
    sh:targetNode gtfs:StopOrPlatform;
    sh:class skos:Concept; 
    sh:property gtfs_shape:LocationTypeScheme .

gtfs_shape:Station a sh:NodeShape;
    sh:targetNode gtfs:Station;
    sh:class skos:Concept; 
    sh:property gtfs_shape:LocationTypeScheme .

gtfs_shape:EntranceOrExit a sh:NodeShape;
    sh:targetNode gtfs:EntranceOrExit;
    sh:class skos:Concept; 
    sh:property gtfs_shape:LocationTypeScheme .

gtfs_shape:GenericNode a sh:NodeShape;
    sh:targetNode gtfs:GenericNode;
    sh:class skos:Concept; 
    sh:property gtfs_shape:LocationTypeScheme .

gtfs_shape:BoardingArea a sh:NodeShape;
    sh:targetNode gtfs:BoardingArea;
    sh:class skos:Concept; 
    sh:property gtfs_shape:LocationTypeScheme .

gtfs_shape:LocationTypeScheme a sh:PropertyShape;
    sh:path skos:inScheme; 
    sh:hasValue gtfs:LocationType .

# RouteType for Routes

gtfs_shape:LightRail a sh:NodeShape;
    sh:targetNode gtfs:LightRail ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .

gtfs_shape:Subway a sh:NodeShape;
    sh:targetNode gtfs:Subway ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .


gtfs_shape:Rail a sh:NodeShape;
    sh:targetNode gtfs:Rail ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .


gtfs_shape:Bus a sh:NodeShape;
    sh:targetNode gtfs:Bus ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .


gtfs_shape:Ferry a sh:NodeShape;
    sh:targetNode gtfs:Ferry ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .

gtfs_shape:CableCar a sh:NodeShape;
    sh:targetNode gtfs:CableCar ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .


gtfs_shape:Gondola a sh:NodeShape;
    sh:targetNode gtfs:Gondola ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .


gtfs_shape:Funicular a sh:NodeShape;
    sh:targetNode gtfs:Funicular ;
    sh:class skos:Concept; 
    sh:property gtfs_shape:RouteTypeScheme .


gtfs_shape:RouteTypeScheme a sh:PropertyShape;
    sh:path skos:inScheme; 
    sh:hasValue gtfs:RouteType .
